Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># DevTools <img align=\"right\" alt=\"DevTools\" src=\"./data/logo.png\" width=\"400px\" height=\"400px\" >\r\n\r\nA File/Object converter utility for software developers built using java for CPSC 210.\r\n\r\n<!-- TABLE OF CONTENTS -->\r\n## Table of Contents\r\n\r\n* [About the Project](#about-this-project)\r\n* [Tools and Technologies Used / Built With](#built-with)\r\n* [How it Works](#how-it-works)\r\n* [Developed By](#developed-by)\r\n* [About Me and Why I built this Project](#about-me-and-why-i-built-this-project)\r\n* [Getting Started](#getting-started)\r\n    * [Prerequisites](#prerequisites)\r\n    * [Installation](#installation)\r\n* [Usage/API Docs](#usage--api-docs)\r\n* [License](#open-source-license)\r\n* [Pull Requests](#pull-requests)\r\n* [Contact](#contact)\r\n* [Acknowledgements](#acknowledgements)\r\n* [User Stories - Phase 1](#user-stories-for-phase-1)\r\n* [User Stories - Phase 2](#user-stories-for-phase-2)\r\n\r\n## About This Project\r\n\r\nThis project is a File/Object converter utility for software developers. \r\nMany software developers require conversion of files and data to another forms such as JSON\r\nto push to their database or for data analysis. Developers often do not want to use free online\r\ntools to convert their data due to privacy reasons. This open source software can be used as\r\na utility in their code. Moreover, this project is fully extensible.\r\n\r\n## Built With\r\n* [java](https://www.java.com/en/)\r\n* [java-fx](https://openjfx.io/)\r\n* [Apache-POI](https://poi.apache.org/)\r\n\r\n## How It Works\r\nUtilizes open source Apache File reader APIs and object construction to perform the necessary file \r\nconversions. Uses those scanners to Stream read every file and perform necessary object construction / conversion.\r\nCustom API docs for this software's usage will be released in the future.\r\nNote : This software is not a product of Apache software foundation. \r\n\r\n## Developed By\r\n\r\n- [Vishal Desh](https://github.com/VDeshh)\r\n\r\n## About me and Why I built this project\r\nI'm Vishal Desh in year 2 pursuing Bachelor of Science and Master of Management. I am passionate about software development. I worked on some software projects and participated in \r\nseveral hackathons over the summer. I had to use a lot of databases for my projects (Firestore, MongoDB etc.) which \r\n majorly used JSON structures. I had to convert the data fetched from the APIs to JSON. Similarly, when I query the database I had to read and process JSON structures. I felt the need for a secure utility which would do this job for me. This was not the only time I need this utility. Even in my data science class I had to convert excel / web scraped tables to CSV files. I soon found the need to build something which would be useful for me and would also contribute to the open source community. The libraries exist, but I found the need to build myself a secure all-in-one platform which is fully extensible. CPSC 210â€™s personal project is a great opportunity for me to build this and get guidance for making this project successful with an interactive UI. \r\n\r\n## Getting Started\r\nFollow these steps to get the software up and running on your local machine.\r\n### Prerequisites\r\nMAC OS:\r\n1. Intel-based Mac running Mac OS X 10.8.3+, 10.9+\r\n2. Administrator privileges for installation\r\n3. 64-bit browser\r\n\r\nWINDOWS:\r\n1. Windows Server 2008 R2 SP1 (64-bit) and above\r\n2. RAM: 128 MB\r\n3. Disk space: 124 MB for JRE; 2 MB for Java Update\r\n4. Processor: Minimum Pentium 2 266 MHz processor\r\n5. Browsers: Internet Explorer 9 and above, Firefox\r\n\r\nSTEPS:\r\n1. Get java IDE installed. \r\n2. To test and modify the code have Amazon Correto JDK 8 installed\r\n \r\n```sh\r\njre [INSTALLCFG=configuration_file_path] [options]\r\n```\r\n\r\n### Installation\r\n\r\n1. Clone the repo\r\n```sh\r\ngit clone https://github.students.cs.ubc.ca/CPSC210-2020W-T1/project_w6y2b.git\r\n```\r\n\r\n2. Open Source Code on any java IDE.\r\n\r\n## Usage / API Docs\r\n`To be updated soon.....`\r\n\r\n## Open Source License\r\n\r\n```\r\nCopyright (C) 2020 Vishal Desh\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n```\r\n\r\n\r\n## Pull Requests\r\n\r\n1. Just fork a version of this repository, make the changes you want to, and make a pull request.\r\n2. I will review the pull request, and accept or reject any incoming changes after testing.\r\n\r\n## Contact\r\n\r\nVishal Desh - [LinkedIn](https://www.linkedin.com/in/vishal-desh-6294141b1) - emailtovishy@gmail.com\r\n\r\nPersonal Website: [Link](http://vishaldesh.com/)\r\n\r\n## Acknowledgements\r\n* [Apache POI HSSF and XSSF Examples ](http://poi.apache.org/components/spreadsheet/examples.html)\r\n* [Apache POI Tutorial by Code Java ](https://www.codejava.net/coding/how-to-write-excel-files-in-java-using-apache-poi)\r\n\r\n## User Stories For Phase 1\r\n\r\n- As a User, I want to be able to read all the Source File Formats\r\n- As a User, I want to be able to display the current Source File contents in the Console based UI\r\n- As a User, I want to be able to convert the file into another File Type Object\r\n- As a User, I want to be able to Navigate through a user-friendly Console UI\r\n- As a User, I want to be able to provide commands for particular file conversions \r\n(eg: Providing the Delimiter for Text File data conversion)\r\n\r\n\r\n\r\n#### Checklist for testing this project for Phase 1 : \r\n\r\n##### 1. Followed the console\r\n\r\n##### 2. Test every type of file read - Files have been uploaded to the data folder in this project \r\n\r\n- Path for Excel File Test : `./data/student.xlsx`\r\n- Path for Text File Test : `./data/gdpdemo.txt`\r\n- Path for XML File Test : `./data/XMLFile.xml`\r\n- Path for CSV File Test : `./data/SampleData.csv`\r\n\r\n##### 3. File conversion tests :\r\n\r\n- Excel to JSON (Returns JSON object and then converted to String)\r\n\r\n\r\n## User Stories For Phase 2\r\n- As a User, I want to be able to perform a file conversion and save it in the new format in my disk\r\n- As a User, I want to be able to login (Load and Read from Workroom) to use this application\r\n- As a User, I want to provide access permission to add kids to this application\r\n- As a User, I want to be able to sign-up (Save to WorkRoom) as a new user and get added to the workroom of this application (Multiple X -> Y)\r\n\r\n#### Checklist for testing this project for Phase 2 :\r\n \r\n##### 1. Followed the console\r\n\r\n##### 2. Test every type of file read - Files have been uploaded to the data folder in this project \r\n\r\n- Path for Excel File Test : `./data/student.xlsx`\r\n- Path for Text File Test : `./data/gdpdemo.txt`\r\n- Path for XML File Test : `./data/XMLFile.xml`\r\n- Path for CSV File Test : `./data/SampleData.csv`\r\n\r\nThis will now be followed by a prompt to save in your data folder.\r\n\r\n##### 3. Data Persistence Test 1:\r\n- Follow the console to login or create an User account.\r\n- You will be able to manually view the Json file in the data folder.\r\n- You can allot access permission as true and false for the users you create and \r\ntest that by following the UI.\r\n\r\n##### 3. Data Persistence Test 2:\r\n- All the file conversions can now be saved to your disk in the appropriate\r\nfile format and extension. \r\n- Follow the UI to write to the data file path and then view it on inteliJ.\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision adc8af42cf21435197889364dc66bdec816a906e)
+++ README.md	(date 1604102290882)
@@ -150,7 +150,7 @@
 - As a User, I want to be able to perform a file conversion and save it in the new format in my disk
 - As a User, I want to be able to login (Load and Read from Workroom) to use this application
 - As a User, I want to provide access permission to add kids to this application
-- As a User, I want to be able to sign-up (Save to WorkRoom) as a new user and get added to the workroom of this application (Multiple X -> Y)
+- As a User, I want to be able to signup (Save to WorkRoom) as a new user and get added to the workroom of this application (Multiple X -> Y)
 
 #### Checklist for testing this project for Phase 2 :
  
Index: src/main/ui/DisplayXmlConsole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport com.aspose.cells.Workbook;\r\nimport model.ReadAndOperateXML;\r\nimport model.WriteFiles;\r\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.w3c.dom.Document;\r\nimport org.w3c.dom.NamedNodeMap;\r\nimport org.w3c.dom.Node;\r\nimport org.w3c.dom.NodeList;\r\n\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport javax.xml.parsers.DocumentBuilderFactory;\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\n//Class to Read and Display the Data in an XML File\r\npublic class DisplayXmlConsole {\r\n\r\n    //Prints the Menu for an XML file\r\n    public static void menuToReadXml() throws Exception {\r\n        System.out.println(\"Press 1 to Display the XML File on the console.\");\r\n        System.out.println(\"Press 2 to Convert the XML File to an excel File\");\r\n        System.out.println(\"Press 2 to Quit DevTools.\");\r\n\r\n        //Declare input as scanner\r\n        Scanner input = new Scanner(System.in);\r\n        char choice = input.next().charAt(0);\r\n\r\n        //Perform Operations based on user's input\r\n        switch (choice) {\r\n\r\n            case '1':\r\n                case1();\r\n                break;\r\n\r\n            case '2':\r\n                case2();\r\n                break;\r\n\r\n            case '3':\r\n                case3();\r\n        }\r\n    }\r\n\r\n    //CHANGE TO MEANINGFUL NAMES\r\n    public static void case1() {\r\n        System.out.println(\"Enter the file path from which you want to read the XML File\");\r\n        Scanner scnr = new Scanner(System.in);\r\n        String filePath = scnr.nextLine();\r\n        readAndDisplay(new File(filePath)); //creating a new file instance using the user's file path to read\r\n    }\r\n\r\n    public static void case2() throws Exception {\r\n        System.out.println(\"Enter the file path from which you want to read the XML File\");\r\n        Scanner scnr2 = new Scanner(System.in);\r\n        String filePath2 = scnr2.nextLine();\r\n        Workbook wb = ReadAndOperateXML.convertExcel(filePath2);\r\n        System.out.println(\"Enter the file path to which you wanna download your Excel File\");\r\n        filePath2 = scnr2.nextLine();\r\n        WriteFiles.writeToExcel(wb, filePath2);\r\n        System.out.println(\"Hurray! You have successfully converted your file to an excel file\");\r\n    }\r\n\r\n    public static void case3() {\r\n        System.out.println(\"Quitting DevTools.....\");\r\n        System.exit(0);\r\n    }\r\n\r\n\r\n    //EFFECTS: Reads and displays the contents of the XML file\r\n    // Uses a helper function to print each of its Child Nodes.\r\n    public static void readAndDisplay(File file) {\r\n\r\n        try {\r\n            DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\r\n            Document document = documentBuilder.parse(file);\r\n            System.out.println(\"Root element: \" + document.getDocumentElement().getNodeName());\r\n            if (document.hasChildNodes()) {\r\n                printNodeList(document.getChildNodes());\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    //EFFECTS: Helper function to print the list of nodes\r\n    private static void printNodeList(NodeList nodeList) {\r\n        for (int count = 0; count < nodeList.getLength(); count++) {\r\n            Node elemNode = nodeList.item(count);\r\n            if (elemNode.getNodeType() == Node.ELEMENT_NODE) {\r\n\r\n                // get node name and value\r\n                System.out.println(\"\\nNode Name =\" + elemNode.getNodeName() + \" [OPEN]\");\r\n                System.out.println(\"Node Content =\" + elemNode.getTextContent());\r\n\r\n                if (elemNode.hasAttributes()) {\r\n                    NamedNodeMap nodeMap = elemNode.getAttributes();\r\n                    for (int i = 0; i < nodeMap.getLength(); i++) {\r\n                        Node node = nodeMap.item(i);\r\n                        System.out.println(\"attr name : \" + node.getNodeName());\r\n                        System.out.println(\"attr value : \" + node.getNodeValue());\r\n                    }\r\n                }\r\n\r\n                if (elemNode.hasChildNodes()) {\r\n                    printNodeList(elemNode.getChildNodes()); //recursive call if the node has child nodes\r\n                }\r\n\r\n                System.out.println(\"Node Name =\" + elemNode.getNodeName() + \" [CLOSE]\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/ui/DisplayXmlConsole.java	(revision adc8af42cf21435197889364dc66bdec816a906e)
+++ src/main/ui/DisplayXmlConsole.java	(date 1604102290889)
@@ -67,6 +67,9 @@
         System.exit(0);
     }
 
+    public static void case4() {
+
+    }
 
     //EFFECTS: Reads and displays the contents of the XML file
     // Uses a helper function to print each of its Child Nodes.
